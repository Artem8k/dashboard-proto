// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: dashboard.proto

package dashboard_v01

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dashboard_GetRegions_FullMethodName   = "/dashboard.dashboard/getRegions"
	Dashboard_GetTu_FullMethodName        = "/dashboard.dashboard/getTu"
	Dashboard_GetTt_FullMethodName        = "/dashboard.dashboard/getTt"
	Dashboard_GetSalesData_FullMethodName = "/dashboard.dashboard/getSalesData"
)

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardClient interface {
	GetRegions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RegionsResponse, error)
	GetTu(ctx context.Context, in *TuRequest, opts ...grpc.CallOption) (*TuResponse, error)
	GetTt(ctx context.Context, in *TtRequest, opts ...grpc.CallOption) (*TtResponse, error)
	GetSalesData(ctx context.Context, in *GetSalesRequest, opts ...grpc.CallOption) (*GetSalesResponse, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) GetRegions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RegionsResponse, error) {
	out := new(RegionsResponse)
	err := c.cc.Invoke(ctx, Dashboard_GetRegions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetTu(ctx context.Context, in *TuRequest, opts ...grpc.CallOption) (*TuResponse, error) {
	out := new(TuResponse)
	err := c.cc.Invoke(ctx, Dashboard_GetTu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetTt(ctx context.Context, in *TtRequest, opts ...grpc.CallOption) (*TtResponse, error) {
	out := new(TtResponse)
	err := c.cc.Invoke(ctx, Dashboard_GetTt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetSalesData(ctx context.Context, in *GetSalesRequest, opts ...grpc.CallOption) (*GetSalesResponse, error) {
	out := new(GetSalesResponse)
	err := c.cc.Invoke(ctx, Dashboard_GetSalesData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility
type DashboardServer interface {
	GetRegions(context.Context, *emptypb.Empty) (*RegionsResponse, error)
	GetTu(context.Context, *TuRequest) (*TuResponse, error)
	GetTt(context.Context, *TtRequest) (*TtResponse, error)
	GetSalesData(context.Context, *GetSalesRequest) (*GetSalesResponse, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServer struct {
}

func (UnimplementedDashboardServer) GetRegions(context.Context, *emptypb.Empty) (*RegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedDashboardServer) GetTu(context.Context, *TuRequest) (*TuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTu not implemented")
}
func (UnimplementedDashboardServer) GetTt(context.Context, *TtRequest) (*TtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTt not implemented")
}
func (UnimplementedDashboardServer) GetSalesData(context.Context, *GetSalesRequest) (*GetSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesData not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetRegions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetTu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetTu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetTu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetTu(ctx, req.(*TuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetTt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetTt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetTt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetTt(ctx, req.(*TtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetSalesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetSalesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetSalesData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetSalesData(ctx, req.(*GetSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRegions",
			Handler:    _Dashboard_GetRegions_Handler,
		},
		{
			MethodName: "getTu",
			Handler:    _Dashboard_GetTu_Handler,
		},
		{
			MethodName: "getTt",
			Handler:    _Dashboard_GetTt_Handler,
		},
		{
			MethodName: "getSalesData",
			Handler:    _Dashboard_GetSalesData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard.proto",
}
